import React, {Fragment} from 'react'
import classes from './BlogItem.module.scss'
import {connect} from 'react-redux'
import BlogLinkItem from '../BlogLinkItem/BlogLinkItem.jsx'
import {shuffleArray} from '../../../Reused/FuncComponents/allReusedFunction'

const BlogItem = ({blogData, blogArticles}) => {


  const svg = {
    // eslint-disable-next-line react/no-multi-comp
    twitter: () => {
      return (
        <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g id="twitter-logo-button">
            <g id="Group">
              <g id="Group_2">
                <path id="Vector"
                      d="M18 0C8.07484 0 0 8.07484 0 18C0 27.9244 8.07484 36 18 36C27.9244 36 36 27.9244 36 18C36 8.07484 27.9259 0 18 0ZM26.0299 13.8803C26.0379 14.0586 26.0422 14.2385 26.0422 14.4183C26.0422 19.8931 21.8761 26.2039 14.2537 26.2039C11.914 26.2039 9.73592 25.5202 7.903 24.3442C8.2271 24.3826 8.557 24.4022 8.89124 24.4022C10.8329 24.4022 12.6187 23.7395 14.0369 22.6287C12.2243 22.5953 10.6937 21.3976 10.1666 19.751C10.4189 19.7988 10.6792 19.8257 10.9453 19.8257C11.323 19.8257 11.6899 19.7764 12.0372 19.6814C10.1419 19.3015 8.71433 17.6273 8.71433 15.6189C8.71433 15.6015 8.71433 15.5834 8.71506 15.5667C9.27334 15.8763 9.91211 16.0634 10.5908 16.0844C9.47998 15.3427 8.74841 14.0739 8.74841 12.6368C8.74841 11.877 8.95215 11.165 9.30887 10.553C11.3513 13.0603 14.4052 14.709 17.8477 14.883C17.7767 14.5792 17.7412 14.2638 17.7412 13.9383C17.7412 11.6508 19.5958 9.79538 21.8833 9.79538C23.0753 9.79538 24.1506 10.2986 24.9075 11.1034C25.8523 10.9177 26.7368 10.5741 27.5394 10.0977C27.2277 11.0657 26.5729 11.877 25.7152 12.3903C26.5541 12.2903 27.3545 12.0684 28.0948 11.7385C27.5423 12.568 26.8398 13.2981 26.0299 13.8803Z"
                      fill="#BDBDBD"
                />
              </g>
            </g>
          </g>
        </svg>
      )
    },
    // eslint-disable-next-line react/no-multi-comp
    telegram: () => {
      return (
        <svg width="37" height="36" viewBox="0 0 37 36" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M15.4307 21.577C15.9201 21.9396 16.4104 22.3036 16.9011 22.6672C16.3888 23.1699 15.8756 23.6731 15.365 24.1755C15.3175 24.224 15.273 24.2747 15.2264 24.3242L15.251 23.9915C15.3097 23.1871 15.3689 22.3814 15.4307 21.577ZM19.457 14.4849C16.9676 16.0469 14.4782 17.6133 11.9875 19.1744C11.9369 19.2058 11.8816 19.2303 11.8255 19.2556C12.1516 20.293 12.4778 21.3307 12.803 22.3689C13.0354 23.0995 13.2765 23.8283 13.4963 24.5618C13.587 24.866 13.7443 25.0289 14.076 24.9713C14.168 23.7299 14.2562 22.4893 14.3503 21.2474C14.3611 21.1026 14.3784 20.9556 14.3961 20.8108C14.2553 20.7304 14.3171 20.5766 14.3659 20.5259C14.4518 20.4378 14.5378 20.348 14.6238 20.2586C14.6544 20.2302 14.6864 20.2014 14.7162 20.1731C14.7594 20.1284 14.8013 20.0837 14.8441 20.0394C15.0501 19.8486 15.2553 19.6544 15.4613 19.4628C15.5788 19.3523 15.6976 19.2415 15.8156 19.1314C16.1352 18.8337 16.4544 18.5363 16.7797 18.2432C17.6065 17.4955 18.4501 16.765 19.2786 16.0203C20.3348 15.0698 21.3883 14.1158 22.4346 13.1545C22.5115 13.0484 22.5611 12.9117 22.6285 12.7948C22.441 12.8198 22.2212 12.7888 22.0721 12.8761C21.1914 13.3982 20.3248 13.9409 19.457 14.4849ZM36.1879 18C36.1879 27.9411 28.0868 36 18.0937 36C8.10022 36 -3.6252e-08 27.9411 -3.6252e-08 18C-3.6252e-08 8.05849 8.10022 2.62279e-08 18.0937 2.62279e-08C28.0868 2.62279e-08 36.1879 8.05849 36.1879 18ZM26.1737 10.8289C26.1642 10.7601 26.1572 10.6896 26.1434 10.6222C25.984 9.85815 25.5633 9.62739 24.8099 9.88393C24.6994 9.92088 24.5862 9.94495 24.4739 9.97546C24.0536 10.1482 23.6376 10.333 23.2112 10.4915C22.5045 10.7567 21.7909 11.0046 21.0782 11.2603C20.6436 11.4404 20.2121 11.6286 19.7737 11.7992C18.6752 12.2263 17.5745 12.6453 16.4743 13.0681C14.2099 13.9366 11.9451 14.8046 9.67905 15.6731C9.1702 15.8686 8.65702 16.0538 8.15335 16.2622C7.71058 16.444 7.25875 16.6202 6.85097 16.8643C6.67041 16.9721 6.47171 17.2557 6.49244 17.4358C6.51231 17.6176 6.79179 17.7731 6.96285 17.9355C6.99395 17.9652 7.04709 17.9746 7.09201 17.9884C8.29244 18.358 9.49287 18.7275 10.6942 19.0962C10.6877 19.2208 10.7019 19.348 10.7413 19.4739L11.178 20.8675L11.7521 22.6959C11.8194 22.9082 11.8873 23.1166 11.9538 23.3251C12.1171 23.8343 12.2868 24.3602 12.441 24.875C12.7771 25.9919 13.6834 26.0783 13.9534 26.0783C13.9935 26.0783 14.0363 26.0757 14.0786 26.074C14.1201 26.0757 14.1616 26.077 14.2026 26.077C14.8959 26.077 15.3413 25.6971 15.6065 25.4698C15.6553 25.4272 15.7019 25.3881 15.7356 25.3623C15.7905 25.3215 15.8419 25.2773 15.886 25.2278C15.9205 25.1922 15.9521 25.1552 15.9862 25.12C16.0419 25.0581 16.0942 25.0001 16.1404 24.9545C16.5434 24.5575 16.9456 24.1617 17.3495 23.7655L17.8281 23.2958C17.8955 23.3422 17.9629 23.3882 18.0307 23.4342C19.1197 24.2429 20.2069 25.0555 21.2998 25.86C22.1153 26.4598 22.6855 26.3043 23.0803 25.3877C23.2484 24.6146 23.4156 23.8399 23.5823 23.0685C23.7352 22.2972 23.8864 21.528 24.0376 20.7584C24.1348 20.3355 24.2307 19.9114 24.3266 19.489C24.5814 18.2978 24.8359 17.1053 25.0894 15.9137C25.1719 15.5334 25.2527 15.1536 25.3348 14.7733C25.3546 14.683 25.3784 14.5923 25.3965 14.5012C25.6566 13.277 25.9149 12.0536 26.1737 10.8289Z"
            fill="#BDBDBD"
          />
        </svg>
      )
    },
    // eslint-disable-next-line react/no-multi-comp
    facebook: () => {
      return (
        <svg width="37" height="36" viewBox="0 0 37 36" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect width="37" height="36" fill="#E5E5E5"/>
          <g id="Post">
            <rect width="1920" height="3832" transform="translate(-976 -2470)" fill="white"/>
            <g id="facebook-logo-button">
              <g id="Group">
                <g id="Group_2">
                  <path id="Vector"
                        d="M18.2529 0C8.18829 0 0 8.07484 0 18C0 27.9244 8.18829 36 18.2529 36C28.3168 36 36.5058 27.9244 36.5058 18C36.5058 8.07484 28.3182 0 18.2529 0ZM22.7922 18.6337H19.8226C19.8226 23.3124 19.8226 29.0715 19.8226 29.0715H15.4222C15.4222 29.0715 15.4222 23.3682 15.4222 18.6337H13.3305V14.9447H15.4222V12.5585C15.4222 10.8496 16.2457 8.17925 19.8631 8.17925L23.1238 8.19157V11.7726C23.1238 11.7726 21.1424 11.7726 20.7571 11.7726C20.3718 11.7726 19.8241 11.9625 19.8241 12.7775V14.9454H23.1767L22.7922 18.6337Z"
                        fill="#BDBDBD"
                  />
                </g>
              </g>
            </g>
          </g>
        </svg>

      )
    },
    // eslint-disable-next-line react/no-multi-comp
    vk: () => {
      return (
        <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M18 0C8.05921 0 0 8.05884 0 18C0 27.9412 8.05921 36 18 36C27.9408 36 36 27.9412 36 18C36 8.05884 27.9408 0 18 0ZM27.1306 19.9468C27.9695 20.7662 28.8571 21.5374 29.6102 22.4415C29.9439 22.8415 30.2584 23.2551 30.4978 23.7202C30.8396 24.3835 30.5309 25.1109 29.9373 25.1503L26.2496 25.1495C25.2972 25.2284 24.5393 24.8442 23.9003 24.1931C23.3902 23.6742 22.917 23.1199 22.4257 22.5833C22.225 22.3631 22.0136 22.1557 21.7617 21.9926C21.259 21.6656 20.8222 21.7657 20.5342 22.2909C20.2407 22.8253 20.1736 23.4175 20.1456 24.0123C20.1055 24.8818 19.8433 25.109 18.9708 25.1499C17.1065 25.2372 15.3377 24.9544 13.6936 24.0145C12.2433 23.1855 11.1208 22.0154 10.1426 20.6907C8.23783 18.1083 6.77905 15.2739 5.46832 12.3582C5.17332 11.7016 5.38914 11.3502 6.11355 11.3366C7.31712 11.3134 8.52067 11.3163 9.72423 11.3355C10.2141 11.3432 10.5381 11.6235 10.7263 12.0857C11.3767 13.6859 12.1741 15.2084 13.1732 16.6204C13.4395 16.9964 13.7113 17.3713 14.0984 17.6369C14.5256 17.93 14.8512 17.8332 15.0526 17.3562C15.1815 17.0531 15.2371 16.729 15.2651 16.4042C15.3609 15.2916 15.3723 14.1794 15.2065 13.0712C15.1034 12.3777 14.7134 11.9299 14.0221 11.7988C13.6701 11.7321 13.7216 11.6018 13.8929 11.4007C14.1901 11.053 14.4685 10.8379 15.025 10.8379L19.1914 10.8372C19.8481 10.9661 19.9954 11.2607 20.0845 11.9222L20.0882 16.5523C20.0805 16.8082 20.2167 17.5669 20.6763 17.7345C21.0446 17.856 21.2877 17.5606 21.5079 17.3275C22.5071 16.2672 23.219 15.0158 23.8565 13.7205C24.1379 13.1493 24.3806 12.5582 24.6163 11.966C24.7916 11.5281 25.0641 11.3127 25.5583 11.32L29.5705 11.3248C29.6887 11.3248 29.8087 11.3259 29.9259 11.3462C30.602 11.4618 30.7873 11.7528 30.5781 12.4124C30.2488 13.4487 29.6091 14.312 28.9838 15.1775C28.3135 16.1041 27.5986 16.9983 26.935 17.9289C26.3251 18.7797 26.3734 19.208 27.1306 19.9468Z"
            fill="#BDBDBD"
          />
        </svg>
      )
    }
  }

  return (
    <article className={classes.container}>
      {
        blogData.content.map((item, i) => {
          switch (Object.keys(item)[0]) {
            case 'soloImage':
              return (
                <img
                  key={'blogMainImg' + i}
                  className={classes.soloImage}
                  src={item.soloImage}
                  alt={'content image' + i}
                />
              )
            case 'title':
              return (
                <h2 key={'blogTitle' + i} className={classes.title}>{item.title}</h2>
              )
            case 'paragraph':
              return (
                <p key={'blogP' + i} className={classes.paragraph}>{item.paragraph}</p>
              )
            case 'list':
              return (
                <ol className={classes.list} key={'blogList' + i}>
                  {
                    item.list.map((li, index) => {
                      return (
                        <li className={classes.listItem} key={'blogLi' + index}>{li}</li>
                      )
                    })
                  }
                </ol>
              )
            case 'imageGroup': {
              return (
                <div key={i} className={classes.imageGroupContainer}>
                  {
                    Object.keys(item.imageGroup).map((images, index) => {
                      return (
                        <Fragment key={'imageGroup' + index}>
                          {images === 'duo' ?
                            <div key={'duoCont' + index} className={classes.ImageGroupDuoContainer}>
                              {
                                item.imageGroup[images].map((image, duoIndex) => {
                                  return (
                                    <img key={'duo' + duoIndex} src={image} alt="content image"/>
                                  )
                                })
                              }
                            </div>
                            :
                            <img className={classes.imageGroupSolo} key={'solo' + index} src={item.imageGroup[images]}
                                 alt="content image"
                            />
                          }
                        </Fragment>
                      )
                    })
                  }
                </div>
              )
            }
            default:
              return false
          }
        })
      }
      <div className={classes.contentFooter}>
        <span className={classes.date}>{blogData.date}</span>
        <div className={classes.linksContainer}>
          {
            Object.keys(blogData.links).map((item, i) => {
              return (
                svg[item] &&
                <a className={classes.socialLink} key={i} href={blogData.links[item]}>
                  {svg[item]()}
                </a>
              )
            })
          }
        </div>
        <span className={classes.author}>
          {blogData.author}
        </span>
      </div>
      <section className={classes.otherArticles}>
        {
          shuffleArray(blogArticles).map((item, i) => {
            return (
              i <= 2 &&
              <BlogLinkItem item={item} key={item.title + i}/>
            )
          })
        }
      </section>
    </article>
  )
}

function mapStateToProps(state) {
  return {
    blogArticles: state.blog.blogArticles
  }
}

export default connect(mapStateToProps)(BlogItem)
